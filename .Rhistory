remaining_supply = 0
} else {
#these people sold their underlying this period
agents[i,]$capital = agents[i,]$capital + agents[i,]$underlying * current_price
agents[i,]$underlying = 0
}
}
else {
if(allow_leverage){
#buy as much as you can
agents[i,]$underlying = agents[i,]$underlying + (agents[i,]$capital + agents[i,]$underlying * price_down)/current_price
agents[i,]$capital = -agents[i,]$underlying * price_down
remaining_supply = remaining_supply - agents[i,]$underlying
} else {
agents[i,]$underlying = agents[i,]$underlying + agents[i,]$capital/current_price
agents[i,]$capital = 0
remaining_supply = remaining_supply - agents[i,]$underlying
}
}
}
return(agents)
}
count = 1000
agents = data.frame(
probability=seq(from=0 + 1/count,to=1-1/count,length.out=count-1),
capital=1,
underlying=1
)
summary(agents)
iterations = 1
price_lookahead = 1
allow_leverage = FALSE
allow_short = FALSE
p = get_price(agents, 0, 0, price_lookahead, allow_leverage, allow_short)
print(p)
a = invest(agents, price_lookahead, FALSE, FALSE)
summary(a)
a
mean(a$underlying)
mean(a$capital)
# for(i in 1:iterations){
#
#   #price is set by supply and demand
#   p = get_price(agents, 0, 0, price_lookahead, allow_leverage, allow_short)
#   print(p)
#
#   #bankrupt agents leave the market
#   agents = agents[(agents$capital + p * agents$underlying) > 0,]
#   #note that if an agent goes bankrupt, they can take losses with them,
#   #and capital goes up in the market
#
#   #agents choose investment based on their own beliefs
#   agents = invest(agents, price, allow_leverage, allow_short)
# }
print(p)
p = get_price(agents, 0, 0, price_lookahead, allow_leverage, allow_short)
price_lookahead = 2
allow_leverage = FALSE
allow_short = FALSE
p = get_price(agents, 0, 0, price_lookahead, allow_leverage, allow_short)
print(p)
a = invest(agents, price_lookahead, FALSE, FALSE)
summary(a)
a
count = 100
agents = data.frame(
probability=seq(from=0 + 1/count,to=1-1/count,length.out=count-1),
capital=1,
underlying=1
)
summary(agents)
iterations = 1
price_lookahead = 2
allow_leverage = FALSE
allow_short = FALSE
p = get_price(agents, 0, 0, price_lookahead, allow_leverage, allow_short)
print(p)
a = invest(agents, price_lookahead, FALSE, FALSE)
summary(a)
a
print(p)
mean(a$underlying)
mean(a$capital)
p = get_price(agents, 0, 0, price_lookahead, allow_leverage, allow_short)
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passengers_array = c(1:2, 1:3, 1:4, 1:5, 1:10, 1:30)
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
for(bad_passengers in bad_passenger_array) {
result = data.frame(n=vector(), p=vector(), prob=vector())
#we construct these as lists because rbind is computationally expensive; instead
#we just rbind them once at the end
logframe_offset = list()
logframe_bad_passengers = list()
logframe_result = list()
for(offset in position_offset) {
final_person_seats = vector()
position_of_interest = n + 1 - offset
for(iteration in 1:iterations){
seat_taken_array = rep(0, n)
seat_occupied_by_array = rep(0,n)
remaining_seats_array = seq(1, n, length.out=n)
sample(remaining_seats_array, 1)
for(i in 1:n) {
if(i %in% bad_passengers || seat_occupied_by_array[i] != 0){
#bad_passengers and people whos seats have been taken select a random unclaimed seat
random_seat = sample(remaining_seats_array[remaining_seats_array != 0], 1)
seat_taken_array[i] = random_seat
seat_occupied_by_array[random_seat] = i
remaining_seats_array[random_seat] = 0
} else {
#good passengers take their own seat
seat_taken_array[i] = i
seat_occupied_by_array[i] = i
remaining_seats_array[i] = 0
}
}
#let's see which seen person n is in:
final_person_seats = c(final_person_seats, seat_taken_array[position_of_interest])
logframe_offset = c(logframe_offset, offset)
logframe_bad_passengers = c(logframe_bad_passengers, length(bad_passengers))
logframe_result = c(logframe_result, seat_taken_array[position_of_interest] == position_of_interest)
}
}
logframe_offset = unlist(logframe_offset)
logframe_bad_passengers = unlist(logframe_bad_passengers)
logframe_result = unlist(logframe_result)
logframe = data.frame(offset=logframe_offset, bad_passengers=logframe_bad_passengers, result=logframe_result)
logframe$log_offset = log(logframe$offset)
logframe$log_bad_passengers = log(logframe$bad_passengers)
#build a logistic model to predict probability
reg = glm(result ~ offset + log_offset, family="binomial", data=logframe)
#For this set of bad passengers, we now have a model to predict probability based on
#offset information.  Let's store the coefficients for later use
newrow=data.frame(
bad_passenger_count=length(bad_passengers),
offset_coefficient=reg$coefs["offset"],
log_offset_coefficient=reg$coefs["log_offset"],
intercept=reg$coefs["(Intercept)"]
)
table_data = rbind(table_data,newrow)
}
i_reg = glm(intercept ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
o_reg = glm(offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
log_o_reg = glm(log_offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
summary(i_reg)
summary(o_reg)
summary(log_o_reg)
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passenger_array = c(1:2, 1:3, 1:4, 1:5, 1:10, 1:30)
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
for(bad_passengers in bad_passenger_array) {
result = data.frame(n=vector(), p=vector(), prob=vector())
#we construct these as lists because rbind is computationally expensive; instead
#we just rbind them once at the end
logframe_offset = list()
logframe_bad_passengers = list()
logframe_result = list()
for(offset in position_offset) {
final_person_seats = vector()
position_of_interest = n + 1 - offset
for(iteration in 1:iterations){
seat_taken_array = rep(0, n)
seat_occupied_by_array = rep(0,n)
remaining_seats_array = seq(1, n, length.out=n)
sample(remaining_seats_array, 1)
for(i in 1:n) {
if(i %in% bad_passengers || seat_occupied_by_array[i] != 0){
#bad_passengers and people whos seats have been taken select a random unclaimed seat
random_seat = sample(remaining_seats_array[remaining_seats_array != 0], 1)
seat_taken_array[i] = random_seat
seat_occupied_by_array[random_seat] = i
remaining_seats_array[random_seat] = 0
} else {
#good passengers take their own seat
seat_taken_array[i] = i
seat_occupied_by_array[i] = i
remaining_seats_array[i] = 0
}
}
#let's see which seen person n is in:
final_person_seats = c(final_person_seats, seat_taken_array[position_of_interest])
logframe_offset = c(logframe_offset, offset)
logframe_bad_passengers = c(logframe_bad_passengers, length(bad_passengers))
logframe_result = c(logframe_result, seat_taken_array[position_of_interest] == position_of_interest)
}
}
logframe_offset = unlist(logframe_offset)
logframe_bad_passengers = unlist(logframe_bad_passengers)
logframe_result = unlist(logframe_result)
logframe = data.frame(offset=logframe_offset, bad_passengers=logframe_bad_passengers, result=logframe_result)
logframe$log_offset = log(logframe$offset)
logframe$log_bad_passengers = log(logframe$bad_passengers)
#build a logistic model to predict probability
reg = glm(result ~ offset + log_offset, family="binomial", data=logframe)
#For this set of bad passengers, we now have a model to predict probability based on
#offset information.  Let's store the coefficients for later use
newrow=data.frame(
bad_passenger_count=length(bad_passengers),
offset_coefficient=reg$coefs["offset"],
log_offset_coefficient=reg$coefs["log_offset"],
intercept=reg$coefs["(Intercept)"]
)
table_data = rbind(table_data,newrow)
}
i_reg = glm(intercept ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
o_reg = glm(offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
log_o_reg = glm(log_offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
summary(i_reg)
summary(o_reg)
summary(log_o_reg)
plot(result$offset, result$prob, ylim=c(0,1.0))
points(result$offset, 1/(1+exp(-predict(reg, newdata=result))), col="red")
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passenger_array = c(1:2, 1:3, 1:4, 1:5, 1:10, 1:30)
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
for(bad_passengers in bad_passenger_array) {
bad_passenger = bad_passenger_array[1]
bad_passenger
}
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passenger_array = c(1:2, 1:3, 1:4, 1:5, 1:10, 1:30)
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
bad_passenger = bad_passenger_array[1]
bad_passenger
bad_passenger = bad_passenger_array[2]
bad_passenger
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passenger_array = c(c(1:2), c(1:3), c(1:4), c(1:5), c(1:10), c(1:30))
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
bad_passenger = bad_passenger_array[2]
for(bad_passengers in bad_passenger_array) {
result = data.frame(n=vector(), p=vector(), prob=vector())
#we construct these as lists because rbind is computationally expensive; instead
#we just rbind them once at the end
logframe_offset = list()
logframe_bad_passengers = list()
logframe_result = list()
for(offset in position_offset) {
final_person_seats = vector()
position_of_interest = n + 1 - offset
for(iteration in 1:iterations){
seat_taken_array = rep(0, n)
seat_occupied_by_array = rep(0,n)
remaining_seats_array = seq(1, n, length.out=n)
sample(remaining_seats_array, 1)
for(i in 1:n) {
if(i %in% bad_passengers || seat_occupied_by_array[i] != 0){
#bad_passengers and people whos seats have been taken select a random unclaimed seat
random_seat = sample(remaining_seats_array[remaining_seats_array != 0], 1)
seat_taken_array[i] = random_seat
seat_occupied_by_array[random_seat] = i
remaining_seats_array[random_seat] = 0
} else {
#good passengers take their own seat
seat_taken_array[i] = i
seat_occupied_by_array[i] = i
remaining_seats_array[i] = 0
}
}
#let's see which seen person n is in:
final_person_seats = c(final_person_seats, seat_taken_array[position_of_interest])
logframe_offset = c(logframe_offset, offset)
logframe_bad_passengers = c(logframe_bad_passengers, length(bad_passengers))
logframe_result = c(logframe_result, seat_taken_array[position_of_interest] == position_of_interest)
}
}
logframe_offset = unlist(logframe_offset)
logframe_bad_passengers = unlist(logframe_bad_passengers)
logframe_result = unlist(logframe_result)
logframe = data.frame(offset=logframe_offset, bad_passengers=logframe_bad_passengers, result=logframe_result)
logframe$log_offset = log(logframe$offset)
logframe$log_bad_passengers = log(logframe$bad_passengers)
#build a logistic model to predict probability
reg = glm(result ~ offset + log_offset, family="binomial", data=logframe)
#For this set of bad passengers, we now have a model to predict probability based on
#offset information.  Let's store the coefficients for later use
newrow=data.frame(
bad_passenger_count=length(bad_passengers),
offset_coefficient=reg$coefs["offset"],
log_offset_coefficient=reg$coefs["log_offset"],
intercept=reg$coefs["(Intercept)"]
)
table_data = rbind(table_data,newrow)
}
i_reg = glm(intercept ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
o_reg = glm(offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
bad_passenger = bad_passenger_array[2]
bad_passenger
bad_passenger_array = c(list(1:2), list(1:3), list(1:4), list(1:5), list(1:10), list(1:30))
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
bad_passenger = bad_passenger_array[2]
bad_passenger
bad_passengers = unlist(bad_passengers)
bad_passengers
bad_passenger = bad_passenger_array[2]
bad_passenger
bad_passengers = bad_passenger_array[2]
bad_passengers
bad_passengers = unlist(bad_passengers)
bad_passengers
result = data.frame(n=vector(), p=vector(), prob=vector())
logframe_offset = list()
logframe_bad_passengers = list()
logframe_result = list()
for(offset in position_offset) {
final_person_seats = vector()
position_of_interest = n + 1 - offset
for(iteration in 1:iterations){
seat_taken_array = rep(0, n)
seat_occupied_by_array = rep(0,n)
remaining_seats_array = seq(1, n, length.out=n)
sample(remaining_seats_array, 1)
for(i in 1:n) {
if(i %in% bad_passengers || seat_occupied_by_array[i] != 0){
#bad_passengers and people whos seats have been taken select a random unclaimed seat
random_seat = sample(remaining_seats_array[remaining_seats_array != 0], 1)
seat_taken_array[i] = random_seat
seat_occupied_by_array[random_seat] = i
remaining_seats_array[random_seat] = 0
} else {
#good passengers take their own seat
seat_taken_array[i] = i
seat_occupied_by_array[i] = i
remaining_seats_array[i] = 0
}
}
#let's see which seen person n is in:
final_person_seats = c(final_person_seats, seat_taken_array[position_of_interest])
logframe_offset = c(logframe_offset, offset)
logframe_bad_passengers = c(logframe_bad_passengers, length(bad_passengers))
logframe_result = c(logframe_result, seat_taken_array[position_of_interest] == position_of_interest)
}
}
logframe_offset = unlist(logframe_offset)
logframe_bad_passengers = unlist(logframe_bad_passengers)
logframe_result = unlist(logframe_result)
logframe = data.frame(offset=logframe_offset, bad_passengers=logframe_bad_passengers, result=logframe_result)
logframe$log_offset = log(logframe$offset)
logframe$log_bad_passengers = log(logframe$bad_passengers)
#build a logistic model to predict probability
reg = glm(result ~ offset + log_offset, family="binomial", data=logframe)
#For this set of bad passengers, we now have a model to predict probability based on
#offset information.  Let's store the coefficients for later use
newrow=data.frame(
bad_passenger_count=length(bad_passengers),
offset_coefficient=reg$coefs["offset"],
log_offset_coefficient=reg$coefs["log_offset"],
intercept=reg$coefs["(Intercept)"]
)
summary(reg)
reg$coefs
reg$coef
newrow=data.frame(
bad_passenger_count=length(bad_passengers),
offset_coefficient=reg$coef["offset"],
log_offset_coefficient=reg$coef["log_offset"],
intercept=reg$coef["(Intercept)"]
)
table_data = rbind(table_data,newrow)
i_reg = glm(intercept ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
o_reg = glm(offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="binomial", data=table_data)
i_reg = glm(intercept ~ bad_passenger_count + log(bad_passenger_count), family="gaussian", data=table_data)
o_reg = glm(offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="gaussian", data=table_data)
log_o_reg = glm(log_offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="gaussian", data=table_data)
summary(i_reg)
summary(o_reg)
summary(log_o_reg)
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passenger_array = c(list(1:2), list(1:3), list(1:4), list(1:5), list(1:10), list(1:30))
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
for(bad_passengers in bad_passenger_array) {
bad_passengers = unlist(bad_passengers)
result = data.frame(n=vector(), p=vector(), prob=vector())
#we construct these as lists because rbind is computationally expensive; instead
#we just rbind them once at the end
logframe_offset = list()
logframe_bad_passengers = list()
logframe_result = list()
for(offset in position_offset) {
final_person_seats = vector()
position_of_interest = n + 1 - offset
for(iteration in 1:iterations){
seat_taken_array = rep(0, n)
seat_occupied_by_array = rep(0,n)
remaining_seats_array = seq(1, n, length.out=n)
sample(remaining_seats_array, 1)
for(i in 1:n) {
if(i %in% bad_passengers || seat_occupied_by_array[i] != 0){
#bad_passengers and people whos seats have been taken select a random unclaimed seat
random_seat = sample(remaining_seats_array[remaining_seats_array != 0], 1)
seat_taken_array[i] = random_seat
seat_occupied_by_array[random_seat] = i
remaining_seats_array[random_seat] = 0
} else {
#good passengers take their own seat
seat_taken_array[i] = i
seat_occupied_by_array[i] = i
remaining_seats_array[i] = 0
}
}
#let's see which seen person n is in:
final_person_seats = c(final_person_seats, seat_taken_array[position_of_interest])
logframe_offset = c(logframe_offset, offset)
logframe_bad_passengers = c(logframe_bad_passengers, length(bad_passengers))
logframe_result = c(logframe_result, seat_taken_array[position_of_interest] == position_of_interest)
}
}
logframe_offset = unlist(logframe_offset)
logframe_bad_passengers = unlist(logframe_bad_passengers)
logframe_result = unlist(logframe_result)
logframe = data.frame(offset=logframe_offset, bad_passengers=logframe_bad_passengers, result=logframe_result)
logframe$log_offset = log(logframe$offset)
logframe$log_bad_passengers = log(logframe$bad_passengers)
#build a logistic model to predict probability
reg = glm(result ~ offset + log_offset, family="binomial", data=logframe)
summary(reg)
#For this set of bad passengers, we now have a model to predict probability based on
#offset information.  Let's store the coefficients for later use
newrow=data.frame(
bad_passenger_count=length(bad_passengers),
offset_coefficient=reg$coef["offset"],
log_offset_coefficient=reg$coef["log_offset"],
intercept=reg$coef["(Intercept)"]
)
table_data = rbind(table_data,newrow)
}
i_reg = glm(intercept ~ bad_passenger_count + log(bad_passenger_count), family="gaussian", data=table_data)
o_reg = glm(offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="gaussian", data=table_data)
log_o_reg = glm(log_offset_coefficient ~ bad_passenger_count + log(bad_passenger_count), family="gaussian", data=table_data)
summary(i_reg)
summary(o_reg)
summary(log_o_reg)
summary(table_data)
table_data
position_offset = c(5, 10, 20, 50, 75, 100)
n = 150
iterations = 100
bad_passenger_array = c(list(1:2), list(1:3), list(1:4), list(1:5), list(1:10), list(1:30))
table_data = data.frame(bad_passenger_count=vector(),offset_coefficient=vector(),log_offset_coefficient=vector(), intercept=vector())
logframe_offset = list()
logframe_bad_passengers = list()
logframe_result = list()
for(bad_passengers in bad_passenger_array) {
bad_passengers = unlist(bad_passengers)
result = data.frame(n=vector(), p=vector(), prob=vector())
#we construct these as lists because rbind is computationally expensive; instead
#we just rbind them once at the end
for(offset in position_offset) {
final_person_seats = vector()
position_of_interest = n + 1 - offset
for(iteration in 1:iterations){
seat_taken_array = rep(0, n)
seat_occupied_by_array = rep(0,n)
remaining_seats_array = seq(1, n, length.out=n)
sample(remaining_seats_array, 1)
for(i in 1:n) {
if(i %in% bad_passengers || seat_occupied_by_array[i] != 0){
#bad_passengers and people whos seats have been taken select a random unclaimed seat
random_seat = sample(remaining_seats_array[remaining_seats_array != 0], 1)
seat_taken_array[i] = random_seat
seat_occupied_by_array[random_seat] = i
remaining_seats_array[random_seat] = 0
} else {
#good passengers take their own seat
seat_taken_array[i] = i
seat_occupied_by_array[i] = i
remaining_seats_array[i] = 0
}
}
#let's see which seen person n is in:
final_person_seats = c(final_person_seats, seat_taken_array[position_of_interest])
logframe_offset = c(logframe_offset, offset)
logframe_bad_passengers = c(logframe_bad_passengers, length(bad_passengers))
logframe_result = c(logframe_result, seat_taken_array[position_of_interest] == position_of_interest)
}
}
}
logframe_offset = unlist(logframe_offset)
logframe_bad_passengers = unlist(logframe_bad_passengers)
logframe_result = unlist(logframe_result)
summary(logframe_offset)
length(logframe_offset)
logframe = data.frame(offset=logframe_offset, bad_passengers=logframe_bad_passengers, result=logframe_result)
logframe$log_offset = log(logframe$offset)
logframe$log_bad_passengers = log(logframe$bad_passengers)
reg = glm(result ~ offset + log_offset + bad_passengers + log_bad_passengers, family="binomial", data=logframe)
summary(reg)
install_github('jakewalker56/jml', force = TRUE)
library("devtools")
install_github('jakewalker56/jml', force = TRUE)
?roc
roc
document()
library(roxygen2)
setwd("~/github/ml-lab")
document()
library("devtools")
library(roxygen2)
setwd("~/github/ml-lab")
document()
